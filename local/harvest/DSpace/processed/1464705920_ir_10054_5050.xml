<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><identifier>ir-10054-5050</identifier><datestamp>2011-12-27T05:36:55Z</datestamp><dc:title>Bidirectional data flow analysis: Myths and reality</dc:title><dc:creator>KHEDKER, UP</dc:creator><dc:creator>DHAMDHERE, DM</dc:creator><dc:subject>strength reduction transformation</dc:subject><dc:subject>partial redundancy elimination</dc:subject><dc:subject>global program optimization</dc:subject><dc:subject>code motion</dc:subject><dc:subject>algorithm</dc:subject><dc:subject>frameworks</dc:subject><dc:subject>suppression</dc:subject><dc:subject>renvoise</dc:subject><dc:subject>morel</dc:subject><dc:description>Research in bidirectional data flow analysis seems to have come to a halt due to an impression that the case for bidirectional data flow analysis has been considerably weakened by a plethora of investigations based on decomposability of known bidirectional placement algorithms into a sequence of purely unidirectional components. This paper shows that the approach of decomposability is not general enough in that it derives its power from the simplifying graph transformation of edge-splitting and the favourable nature of flows in partial redundancy elimination (PRE). This follows from the fact that in the absence of edge-splitting, PRE cannot be performed using a sequence of cascaded unidirectional flows. Further, edge-splitting inherently converts data flows involved in PRE into unidirectional flows. In our opinion, this obviates the need of an alternative formulation. We also show that edge-splitting cannot convert data flows involved in "truly" bidirectional data flow problems into unidirectional flows. Thus not every bidirectional data flow problem can be converted into unidirectional flows. Besides, we argue that the premise that bidirectional analysis is more complex than unidirectional analysis, is invalid. We also mention some issues in bidirectional data flow analysis which need to be investigated.</dc:description><dc:publisher>ASSOC COMPUTING MACHINERY</dc:publisher><dc:date>2011-07-18T20:09:39Z</dc:date><dc:date>2011-12-26T12:50:48Z</dc:date><dc:date>2011-12-27T05:36:55Z</dc:date><dc:date>2011-07-18T20:09:39Z</dc:date><dc:date>2011-12-26T12:50:48Z</dc:date><dc:date>2011-12-27T05:36:55Z</dc:date><dc:date>1999</dc:date><dc:type>Article</dc:type><dc:identifier>ACM SIGPLAN NOTICES, 34(6), 47-57</dc:identifier><dc:identifier>0362-1340</dc:identifier><dc:identifier>http://dx.doi.org/10.1145/606666.606676</dc:identifier><dc:identifier>http://dspace.library.iitb.ac.in/xmlui/handle/10054/5050</dc:identifier><dc:identifier>http://hdl.handle.net/10054/5050</dc:identifier><dc:language>en</dc:language></oai_dc:dc>