<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><identifier>ir-10054-5047</identifier><datestamp>2011-12-27T05:36:54Z</datestamp><dc:title>An improved bound for call strings based interprocedural analysis of bit vector frameworks</dc:title><dc:creator>KARKARE, B</dc:creator><dc:creator>KHEDKER, UP</dc:creator><dc:subject>data-flow analysis</dc:subject><dc:subject>algorithms</dc:subject><dc:subject>languages</dc:subject><dc:subject>theory</dc:subject><dc:subject>interprocedural data flow analysis</dc:subject><dc:subject>bit vector data flow frameworks</dc:subject><dc:description>Interprocedural data flow analysis extends the scope of analysis across procedure boundaries in search of increased optimization opportunities. Call strings based approach is a general approach for performing flow and context sensitive interprocedural analysis. It maintains a history of calls along with the data flow information in the form of call strings, which are sequences of unfinished calls. Recursive programs may need infinite call strings for interprocedural data flow analysis. For bit vector frameworks this method is believed to require all call strings of lengths up to 3K, where K is the maximum number of distinct call sites in any call chain. We combine the nature of information flows in bit-vector data flow analysis with the structure of interprocedurally valid paths to bound the call strings. Instead of bounding the length of call strings, we bound the number of occurrences of any call site in a call string. We show that the call strings in which a call site appears at most three times, are sufficient for convergence on interprocedural maximum fixed point solution. Though this results in the same worst case length of call strings, it does not require constructing all call strings up to length 3K. Our empirical measurements on recursive programs show that our bound reduces the lengths and the number of call strings, and hence the analysis time, significantly.</dc:description><dc:publisher>ASSOC COMPUTING MACHINERY</dc:publisher><dc:date>2011-07-18T19:59:49Z</dc:date><dc:date>2011-12-26T12:50:48Z</dc:date><dc:date>2011-12-27T05:36:54Z</dc:date><dc:date>2011-07-18T19:59:49Z</dc:date><dc:date>2011-12-26T12:50:48Z</dc:date><dc:date>2011-12-27T05:36:54Z</dc:date><dc:date>2007</dc:date><dc:type>Article</dc:type><dc:identifier>ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS, 29(6), -</dc:identifier><dc:identifier>0164-0925</dc:identifier><dc:identifier>http://dx.doi.org/10.1145/1286821.1286829</dc:identifier><dc:identifier>http://dspace.library.iitb.ac.in/xmlui/handle/10054/5047</dc:identifier><dc:identifier>http://hdl.handle.net/10054/5047</dc:identifier><dc:language>en</dc:language></oai_dc:dc>