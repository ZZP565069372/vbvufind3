<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><identifier>ir-10054-1706</identifier><datestamp>2013-11-27T04:23:49Z</datestamp><dc:title>Fast, processor-cardinality agnostic PRNG with a tracking application</dc:title><dc:creator>JANOWCZYK, ANDREW</dc:creator><dc:creator>SHARAT CHANDRAN</dc:creator><dc:creator>ALURU, SRINIVAS</dc:creator><dc:subject>fibonacci sequences</dc:subject><dc:subject>computer graphic equipment</dc:subject><dc:subject>computer vision</dc:subject><dc:subject>particle filtering (numerical methods)</dc:subject><dc:subject>random number generation</dc:subject><dc:description>As vision algorithms mature with increasing inspiration from the learning community, statistically independent pseudo random number generation (PRNG) becomes increasingly important. At the same time, execution time demands have seen algorithms being implemented on evolving parallel hardware such as GPUs. The Mersenne Twister (MT) [7] has proven to be the current state of the art for generating high quality random numbers, and the Nvidia provided software for parallel MT is in widespread use. While execution time is important, development time is also critical. As processor cardinality changes, a foundation for generating simulations that will vary only in execution time and not in the actual result is useful; otherwise the development time will be impacted. In this paper, we present an implementation of the Lagged Fibonacci Generator (LFG) considered to be of quality equal [7] to MT on the GPU. Unlike MT, LFG has this important processor-cardinality agnostic capability – that is – as the number of processing resources changes, the overall sequence of random numbers remains the same. This feature not withstanding, our basic implementation is roughly as fast as the parallel MT; an in-memory version is actually 25% faster in execution time. Both parallel MT as well as parallel LFG show enormous speed up over their sequential counterparts. Finally, a prototype particle filter tracking application shows that our method works not just in parallel computing theory, but also in practice for vision applications, providing a decrease of 60% in execution time.</dc:description><dc:publisher>IEEE</dc:publisher><dc:date>2009-10-12T04:15:02Z</dc:date><dc:date>2011-11-28T09:06:06Z</dc:date><dc:date>2011-12-15T09:58:07Z</dc:date><dc:date>2009-10-12T04:15:02Z</dc:date><dc:date>2011-11-28T09:06:06Z</dc:date><dc:date>2011-12-15T09:58:07Z</dc:date><dc:date>2008</dc:date><dc:type>Article</dc:type><dc:identifier>Proceedings of the Sixth Indian Conference on Computer Vision, Graphics &amp; Image Processing, Bhubaneswar, India, 16-19 December 2008, 171-178</dc:identifier><dc:identifier>978-0-7695-3476-3</dc:identifier><dc:identifier>10.1109/ICVGIP.2008.90</dc:identifier><dc:identifier>http://hdl.handle.net/10054/1706</dc:identifier><dc:identifier>http://dspace.library.iitb.ac.in/xmlui/handle/10054/1706</dc:identifier><dc:language>en</dc:language></oai_dc:dc>