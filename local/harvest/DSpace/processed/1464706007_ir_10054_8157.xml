<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><identifier>ir-10054-8157</identifier><datestamp>2011-12-27T05:40:09Z</datestamp><dc:title>The PROMPT real-time commit protocol</dc:title><dc:creator>HARITSA JR</dc:creator><dc:creator>RAMAMRITHAM, K</dc:creator><dc:creator>GUPTA, R</dc:creator><dc:subject>distributed real-time database</dc:subject><dc:subject>commit protocol</dc:subject><dc:subject>two phase commit</dc:subject><dc:subject>three phase commit</dc:subject><dc:subject>priority inheritance</dc:subject><dc:subject>performance evaluation</dc:subject><dc:description>We investigate the performance implications of providing transaction atomicity for firm-deadline real-time applications operating on distributed data. Using a detailed simulation model, the real-time performance of a representative set of classical transaction commit protocols is evaluated. The experimental results show that data distribution has a significant influence on real-time performance and that the choice of commit protocol clearly affects the magnitude of this influence. We also propose and evaluate a new commit protocol, PROMPT (Permits Reading Of Modified Prepared-data for Timeliness), that is specifically designed for the realtime domain. PROMPT allows transactions to "optimistically" borrow, in a controlled manner, the updated data of transactions currently in their commit phase. This controlled borrowing reduces the data inaccessibility and the priority inversion that is inherent in distributed real-time commit processing. A simulation-based evaluation shows PROMPT to be highly successful, as compared to the classical commit protocols, in minimizing the number of missed transaction deadlines. in fact, its performance is close to the best on-line performance that could be achieved using the optimistic lending approach. Further, it is easy to implement and incorporate in current database system software. Finally, PROMPT is compared against an alternative priority inheritance-based approach to addressing priority inversion during commit processing. The results indicate that priority inheritance does not provide tangible performance benefits.</dc:description><dc:publisher>IEEE COMPUTER SOC</dc:publisher><dc:date>2011-07-31T15:22:56Z</dc:date><dc:date>2011-12-26T12:53:03Z</dc:date><dc:date>2011-12-27T05:40:09Z</dc:date><dc:date>2011-07-31T15:22:56Z</dc:date><dc:date>2011-12-26T12:53:03Z</dc:date><dc:date>2011-12-27T05:40:09Z</dc:date><dc:date>2000</dc:date><dc:type>Article</dc:type><dc:identifier>IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS, 11(2), 160-181</dc:identifier><dc:identifier>1045-9219</dc:identifier><dc:identifier>http://dspace.library.iitb.ac.in/xmlui/handle/10054/8157</dc:identifier><dc:identifier>http://hdl.handle.net/10054/8157</dc:identifier><dc:language>en</dc:language></oai_dc:dc>