<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><identifier>ir-100-2578</identifier><datestamp>2011-12-15T09:12:17Z</datestamp><dc:title>On efficiently implementing SchemaSQL on a SQL database system</dc:title><dc:creator>LAKSHMANAN, LVS</dc:creator><dc:creator>SADRI, F</dc:creator><dc:creator>SUBRAMANIAN, SN</dc:creator><dc:subject>logic</dc:subject><dc:description>SchemaSQL is a recently proposed extension to SQL for enabling multi-database interoperability. Several recently identified applications for SchemaSQL, however, mainly rely on its ability to treat data and schema labels in a uniform manner, and call for an efficient implementation of it on a single RDBMS. We first develop a logical algebra for SchemaSQL by combining classical relational algebra with four restructuring operators - unfold, fold, split, and unite - originally introduced in the context of the tabular data model by Gyssens et al. [GLS96], and suitably adapted to fit the needs of SchemaSQL. We give an algorithm for translating SchemaSQL queries/views involving restructuring, into the logical algebra above. We also provide physical algebraic operators which are useful for query optimization. Using the various operators as a vehicle, we give several alternate implementation strategies for SchemaSQL queries/views. All the proposed strategies can be implemented non-intrusively on top of existing relational DBMS, in that they do not require any additions to the existing set of plan operators. We conducted a series of performance experiments based on TPC-D benchmark data, using the IBM DB2 DBMS running on Windows/NT. In addition to showing the relative tradeoffs between Various alternate strategies, our experiments show the feasibility of implementing SchemaSQL on top of traditional RDBMS in a non-intrusive manner. Further more, they also suggest new plan operators which might profitably be added to the existing set available to relational query optimizers, to further boost their performance.</dc:description><dc:publisher>MORGAN KAUFMANN PUB INC</dc:publisher><dc:date>2011-10-27T07:30:14Z</dc:date><dc:date>2011-12-15T09:12:17Z</dc:date><dc:date>2011-10-27T07:30:14Z</dc:date><dc:date>2011-12-15T09:12:17Z</dc:date><dc:date>1999</dc:date><dc:type>Proceedings Paper</dc:type><dc:identifier>PROCEEDINGS OF THE TWENTY-FIFTH INTERNATIONAL CONFERENCE ON VERY LARGE DATA BASES,471-482</dc:identifier><dc:identifier>1-55860-615-7</dc:identifier><dc:identifier>http://dspace.library.iitb.ac.in/xmlui/handle/10054/16221</dc:identifier><dc:identifier>http://hdl.handle.net/100/2578</dc:identifier><dc:source>25th International Conference on Very Large Data Bases,EDINBURGH, SCOTLAND,SEP 07-10, 1999</dc:source><dc:language>English</dc:language></oai_dc:dc>