<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><identifier>ir-100-1133</identifier><datestamp>2011-12-15T09:09:51Z</datestamp><dc:title>Distributed multi-level recovery in main-memory databases</dc:title><dc:creator>RASTOGI, R</dc:creator><dc:creator>BOHANNON, P</dc:creator><dc:creator>PARKER, J</dc:creator><dc:creator>SILBERSCHATZ, A</dc:creator><dc:creator>SESHADRI, S</dc:creator><dc:creator>SUDARSHAN, S</dc:creator><dc:subject>distributed systems</dc:subject><dc:subject>transactions</dc:subject><dc:subject>logging</dc:subject><dc:subject>locking</dc:subject><dc:subject>concurrency control</dc:subject><dc:subject>recovery</dc:subject><dc:description>In this paper we present recovery techniques for distributed main-memory databases, specifically for client-server and shared-disk architectures. We present a recovery scheme for client-server architectures which is based on shipping log records to the server, and two recovery schemes for shared-disk architectures-one based on page shipping, and the other based on broadcasting of the log of updates. The schemes offer different tradeoffs, based on factors such as update rates. Our techniques are extensions to a distributed-memory setting of a centralized recovery scheme for main-memory databases, which has been implemented in the Dali main-memory database system. Our centralized as well as distributed-memory recovery schemes have several attractive features-they support an explicit multi-level recovery abstraction for high concurrency, reduce disk I/O by writing only redo log records to disk during normal processing, and use per-transaction redo and undo logs to reduce contention on the system log. Further, the techniques use a fuzzy checkpointing scheme that writes only dirty pages to disk, yet minimally interferes with normal processing-all but one of our recovery schemes do not require updaters to even acquire a latch before updating a page. Our log shipping/broadcasting schemes also support concurrent updates to the same page at different sites.</dc:description><dc:publisher>SPRINGER</dc:publisher><dc:date>2011-10-19T05:22:07Z</dc:date><dc:date>2011-12-15T09:09:51Z</dc:date><dc:date>2011-10-19T05:22:07Z</dc:date><dc:date>2011-12-15T09:09:51Z</dc:date><dc:date>1998</dc:date><dc:type>Article; Proceedings Paper</dc:type><dc:identifier>DISTRIBUTED AND PARALLEL DATABASES,6(1)41-71</dc:identifier><dc:identifier>0926-8782</dc:identifier><dc:identifier>http://dx.doi.org/10.1023/A:1008694713931</dc:identifier><dc:identifier>http://dspace.library.iitb.ac.in/xmlui/handle/10054/14335</dc:identifier><dc:identifier>http://hdl.handle.net/100/1133</dc:identifier><dc:source>4th International Conference on Parallel and Distributed Information Systems,MIAMI BEACH, FL,DEC 18-20, 1996</dc:source><dc:language>English</dc:language></oai_dc:dc>