<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><identifier>ir-10054-1662</identifier><datestamp>2011-12-15T09:57:54Z</datestamp><dc:title>A versioning scheme for consistent evolution of OO applications</dc:title><dc:creator>BELLUR, UMESH</dc:creator><dc:creator>VALLIESWARAN, V</dc:creator><dc:subject>configuration management</dc:subject><dc:subject>object oriented programming</dc:subject><dc:subject>software architecture</dc:subject><dc:subject>software maintenance</dc:subject><dc:description>Agile software development practices encourage the evolutionary paradigm of software construction. The result is a series of changes made to the code and designs starting from an initial version. However, rarely do designs keep pace with the changes in code - rather they are often outdated with the first few releases. The problem is only compounded by the various design representations that together comprise the design (state diagrams, class diagrams etc.). This adversely affects development since it is best to begin the process of evolution with the latest design representation that is consistent with the code since it provides a high level view of the system that is easy to understand. Such evolutionary practices therefore present three main challenges from a development environment perspective: (1) Consistency amongst different design representations (2) Traceability of design into code and vice versa (3) Versioning of designs along with code to maintain a consistent view of the application evolution. Our research presents solutions to all three issues starting from a relational meta-model of development and design entities. We have already published results that showcase our solution to the first two problems - in this paper we present an algorithm to version design and code so that the developer always sees a consistent snapshot and prove that this algorithm satisfies the safety requirements of consistency. We also outline an architecture rooted in the layered SCM model to support our versioning scheme.</dc:description><dc:publisher>IEEE</dc:publisher><dc:date>2009-09-24T06:55:32Z</dc:date><dc:date>2011-11-28T08:55:34Z</dc:date><dc:date>2011-12-15T09:57:54Z</dc:date><dc:date>2009-09-24T06:55:32Z</dc:date><dc:date>2011-11-28T08:55:34Z</dc:date><dc:date>2011-12-15T09:57:54Z</dc:date><dc:date>2006</dc:date><dc:type>Article</dc:type><dc:identifier>Proceedings of the 13th Asia Pacific Software Engineering Conference, Kanpur, India, 6-8 December 2006, 435-442</dc:identifier><dc:identifier>0-7695-2685-3</dc:identifier><dc:identifier>10.1109/APSEC.2006.16</dc:identifier><dc:identifier>http://hdl.handle.net/10054/1662</dc:identifier><dc:identifier>http://dspace.library.iitb.ac.in/xmlui/handle/10054/1662</dc:identifier><dc:language>en</dc:language></oai_dc:dc>