<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><identifier>ir-10054-1364</identifier><datestamp>2011-12-27T05:48:01Z</datestamp><dc:title>Detection and recovery techniques for database corruption</dc:title><dc:creator>BOHANNON, PHILIP</dc:creator><dc:creator>RASTOGI, RAJEEV</dc:creator><dc:creator>SESHADRI, S</dc:creator><dc:creator>SILBERSCHATZ, AVI</dc:creator><dc:creator>SUDARSHAN, S</dc:creator><dc:subject>database management systems</dc:subject><dc:subject>software fault tolerance</dc:subject><dc:subject>storage management</dc:subject><dc:subject>system recovery</dc:subject><dc:description>Increasingly, for extensibility and performance, special purpose application code is being integrated with database system code. Such application code has direct access to database system buffers, and as a result, the danger of data being corrupted due to inadvertent application writes is increased. Previously proposed hardware techniques to protect from corruption require system calls, and their performance depends on details of the hardware architecture. We investigate an alternative approach which uses codewords associated with regions of data to detect corruption and to prevent corrupted data from being used by subsequent transactions. We develop several such techniques which vary in the level of protection, space overhead, performance, and impact on concurrency. These techniques are implemented in the Dali main-memory storage manager, and the performance impact of each on normal processing is evaluated. Novel techniques are developed to recover when a transaction has read corrupted data caused by a bad write and gone on to write other data in the database. These techniques use limited and relatively low-cost logging of transaction reads to trace the corruption and may also prove useful when resolving problems caused by incorrect data entry and other logical errors.</dc:description><dc:publisher>IEEE</dc:publisher><dc:date>2009-05-14T13:46:49Z</dc:date><dc:date>2011-12-08T07:18:05Z</dc:date><dc:date>2011-12-26T13:02:04Z</dc:date><dc:date>2011-12-27T05:48:01Z</dc:date><dc:date>2009-05-14T13:46:49Z</dc:date><dc:date>2011-12-08T07:18:05Z</dc:date><dc:date>2011-12-26T13:02:04Z</dc:date><dc:date>2011-12-27T05:48:01Z</dc:date><dc:date>2003</dc:date><dc:type>Article</dc:type><dc:identifier>IEEE Transactions on Knowledge and Data Engineering 15(5), 1120-1136</dc:identifier><dc:identifier>1041-4347</dc:identifier><dc:identifier>10.1109/TKDE.2003.1232268</dc:identifier><dc:identifier>http://hdl.handle.net/10054/1364</dc:identifier><dc:identifier>http://dspace.library.iitb.ac.in/xmlui/handle/10054/1364</dc:identifier><dc:language>en</dc:language></oai_dc:dc>