<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><identifier>ir-10054-5070</identifier><datestamp>2011-12-27T05:36:58Z</datestamp><dc:title>SPRNG: A scalable library for pseudorandom number generation</dc:title><dc:creator>MASCAGNI, M</dc:creator><dc:creator>SRINIVASAN, A</dc:creator><dc:subject>long-range correlations</dc:subject><dc:subject>monte-carlo</dc:subject><dc:subject>parallel computers</dc:subject><dc:subject>ising-model</dc:subject><dc:subject>simulations</dc:subject><dc:subject>sequences</dc:subject><dc:subject>algorithm</dc:subject><dc:subject>tests</dc:subject><dc:subject>algorithms</dc:subject><dc:subject>design</dc:subject><dc:subject>documentation</dc:subject><dc:subject>experimentation</dc:subject><dc:subject>performance</dc:subject><dc:subject>reliability</dc:subject><dc:subject>standardization</dc:subject><dc:subject>parallel random-number generators</dc:subject><dc:subject>random-number software</dc:subject><dc:subject>linear congruential generator</dc:subject><dc:subject>lagged-fibonacci generator</dc:subject><dc:subject>random-number tests</dc:subject><dc:description>In this article Re present background, rationale, and a description of the Scalable Parallel Random Number Generators (SPRNG) library. We begin by presenting some methods for parallel pseudorandom number generation. We will focus on methods based on parameterization, meaning that we will not consider splitting methods such as the leap-frog or blocking methods. We describe, in detail, parameterized versions of the following pseudorandom number generators: (i) linear congruential generators, (ii) shift-register generators, and (iii) lagged-Fibonacci generators. We briefly describe the methods, detail some advantages and disadvantages of each method, and recount results from number theory that impact our understanding of their quality in parallel applications. SPRNG was designed around the uniform implementation of different families of parameterized random number generators. We then present a short description of SPRNG. The description contained within this document is meant only to outline the rationale behind and the capabilities of SPRNG. Much more information, including examples and detailed documentation aimed at helping users with putting and using SPRNG on scalable systems is available at http://sprng.cs.fsu.edu. In this description of SPRNG we discuss the random-number generator library as well as the suite of tests of randomness that is an integral Dart of SPRNG. Random-number tools for parallel Monte Carlo applications must be subjected to classical as well as new types of empirical tests of randomness to eliminate generators that show defects when used in scalable environments.</dc:description><dc:publisher>ASSOC COMPUTING MACHINERY</dc:publisher><dc:date>2011-07-18T21:17:06Z</dc:date><dc:date>2011-12-26T12:50:50Z</dc:date><dc:date>2011-12-27T05:36:58Z</dc:date><dc:date>2011-07-18T21:17:06Z</dc:date><dc:date>2011-12-26T12:50:50Z</dc:date><dc:date>2011-12-27T05:36:58Z</dc:date><dc:date>2000</dc:date><dc:type>Article</dc:type><dc:identifier>ACM TRANSACTIONS ON MATHEMATICAL SOFTWARE, 26(3), 436-461</dc:identifier><dc:identifier>0098-3500</dc:identifier><dc:identifier>http://dx.doi.org/10.1145/358407.358427</dc:identifier><dc:identifier>http://dspace.library.iitb.ac.in/xmlui/handle/10054/5070</dc:identifier><dc:identifier>http://hdl.handle.net/10054/5070</dc:identifier><dc:language>en</dc:language></oai_dc:dc>