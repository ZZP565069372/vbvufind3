<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><identifier>ir-10054-9632</identifier><datestamp>2011-12-27T05:43:48Z</datestamp><dc:title>Filter objects for Java</dc:title><dc:creator>JOSHI, RK</dc:creator><dc:creator>MASCARENHAS, M</dc:creator><dc:creator>MURARKA, Y</dc:creator><dc:subject>filter objects</dc:subject><dc:subject>transparency</dc:subject><dc:subject>interclass relationship</dc:subject><dc:subject>java extension</dc:subject><dc:subject>evolution</dc:subject><dc:description>Filtering is an emerging abstraction in object-oriented systems. Filtering can be characterized by an ability to filter messages in transit and perform intermediate actions. Filters can be used for carrying out intermediate tasks such as encryption, load balancing, caching, security checks and add-on computations. A few filtering approaches have been proposed earlier and some commercial implementations with specialized filtering capabilities are available. This paper discusses a model for transparent and dynamically pluggable first class filter objects for object-oriented systems based on the Java programming language. The filter object model is based on an interclass filter relationship. The model is realized through extensions to the Java programming language. Filter objects can be injected into message paths during execution time and they are transparent to both clients and servers. The properties of filter objects enable them to be employed as a mechanism for evolution promoting reuse of existing code. A method of evolution through filter objects is discussed. A translator for Java filters (TJF) has been designed and implemented. TJF translates an extended Java program involving filter constructs into an equivalent Java code. The translation scheme is presented and the performance of the translated code is analyzed. A brief survey of existing approaches related to filtering in object-oriented systems has also been presented. Copyright (C) 2003 John Wiley Sons, Ltd.</dc:description><dc:publisher>JOHN WILEY &amp; SONS LTD</dc:publisher><dc:date>2011-08-16T21:48:04Z</dc:date><dc:date>2011-12-26T12:55:09Z</dc:date><dc:date>2011-12-27T05:43:48Z</dc:date><dc:date>2011-08-16T21:48:04Z</dc:date><dc:date>2011-12-26T12:55:09Z</dc:date><dc:date>2011-12-27T05:43:48Z</dc:date><dc:date>2003</dc:date><dc:type>Article</dc:type><dc:identifier>SOFTWARE-PRACTICE &amp; EXPERIENCE, 33(6), 509-522</dc:identifier><dc:identifier>0038-0644</dc:identifier><dc:identifier>http://dx.doi.org/10.1002/spe.507</dc:identifier><dc:identifier>http://dspace.library.iitb.ac.in/xmlui/handle/10054/9632</dc:identifier><dc:identifier>http://hdl.handle.net/10054/9632</dc:identifier><dc:language>en</dc:language></oai_dc:dc>