<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><identifier>ir-10054-1348</identifier><datestamp>2011-12-27T05:47:55Z</datestamp><dc:title>Anonymous remote computing: a paradigm for parallel programming on interconnected workstations</dc:title><dc:creator>JOSHI, RUSHIKESH K</dc:creator><dc:creator>JANAKI RAM, D</dc:creator><dc:subject>interconnection networks</dc:subject><dc:subject>computer programming</dc:subject><dc:subject>high level languages</dc:subject><dc:subject>programming theory</dc:subject><dc:subject>parallel algorithms</dc:subject><dc:description>Parallel computing on interconnected workstations is becoming a viable and attractive proposition due to the rapid growth in speeds of interconnection networks and processors. In the case of workstation clusters, there is always a considerable amount of unused computing capacity available in the network. However, heterogeneity in architectures and operating systems, load variations on machines, variations in machine availability, and failure susceptibility of networks and workstations complicate the situation for the programmer. In this context, new programming paradigms that reduce the burden involved in programming for distribution, load adaptability, heterogeneity and fault tolerance gain importance. This paper identifies the issues involved in parallel computing on a network of workstations. The Anonymous Remote Computing (ARC) paradigm is proposed to address the issues specific to parallel programming on workstation systems. ARC differs from the conventional communicating process model by treating a program as one single entity consisting of several loosely coupled remote instruction blocks instead of treating it as a collection of processes. The ARC approach results in distribution transparency and heterogeneity transparency. At the same time, it provides fault tolerance and load adaptability to parallel programs on workstations. ARC is developed in a two-tiered architecture consisting of high level language constructs and low level ARC primitives. The paper describes an implementation of the ARC kernel supporting ARC primitives.</dc:description><dc:publisher>IEEE</dc:publisher><dc:date>2009-05-11T13:29:30Z</dc:date><dc:date>2011-12-08T07:13:04Z</dc:date><dc:date>2011-12-26T13:02:02Z</dc:date><dc:date>2011-12-27T05:47:55Z</dc:date><dc:date>2009-05-11T13:29:30Z</dc:date><dc:date>2011-12-08T07:13:04Z</dc:date><dc:date>2011-12-26T13:02:02Z</dc:date><dc:date>2011-12-27T05:47:55Z</dc:date><dc:date>1999</dc:date><dc:type>Article</dc:type><dc:identifier>IEEE Transactions on Software Engineering 25(1), 75-90</dc:identifier><dc:identifier>0098-5589</dc:identifier><dc:identifier>10.1109/32.748919</dc:identifier><dc:identifier>http://hdl.handle.net/10054/1348</dc:identifier><dc:identifier>http://dspace.library.iitb.ac.in/xmlui/handle/10054/1348</dc:identifier><dc:language>en</dc:language></oai_dc:dc>