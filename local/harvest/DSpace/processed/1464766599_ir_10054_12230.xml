<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><identifier>ir-10054-12230</identifier><datestamp>2012-03-21T03:50:53Z</datestamp><dc:title>Octree-to-BRep conversion for volumetric NC simulation</dc:title><dc:creator>KARUNAKARAN, KP</dc:creator><dc:creator>SHRINGI, R</dc:creator><dc:subject>region representation</dc:subject><dc:subject>algorithms</dc:subject><dc:subject>objects</dc:subject><dc:subject>model</dc:subject><dc:subject>boundary representation</dc:subject><dc:subject>octree representation</dc:subject><dc:subject>solid modeling</dc:subject><dc:subject>volumetric nc simulation</dc:subject><dc:description>User-friendliness such as ease of creation and modification and system-friendliness such as space and time complexities, accuracy etc. are two important criteria for the selection of a solid representation scheme. No single solid representation scheme fully meets all the requirements of user-friendliness and system-friendliness. Hence, any practical CAD/CAM system maintains the geometry of the objects in more than one solid representation scheme simultaneously. Therefore, it is often required to convert one solid representation scheme to the other. The authors have developed a volumetric NC simulation system in which the instantaneous blank is represented as an octree as its space and time complexities are independent of the number of NC blocks. However, since octree does not lend itself readily for operations such as arbitrary transformations, rendered display etc., it is not directly usable for downstream applications such as animated display, verification and optimization. Boundary representation is suitable for these downstream applications. Therefore, it is required to convert octree of the instantaneous blank into BRep. An efficient algorithm for this conversion is presented in this paper. This algorithm essentially splits the octree into three quadtrees that store the geometry along the three principal directions. This algorithm is fast as it involves only tree-traversals.</dc:description><dc:publisher>SPRINGER LONDON LTD</dc:publisher><dc:date>2011-08-30T07:10:04Z</dc:date><dc:date>2011-12-26T12:58:49Z</dc:date><dc:date>2011-12-27T05:49:24Z</dc:date><dc:date>2011-08-30T07:10:04Z</dc:date><dc:date>2011-12-26T12:58:49Z</dc:date><dc:date>2011-12-27T05:49:24Z</dc:date><dc:date>2007</dc:date><dc:type>Article</dc:type><dc:identifier>INTERNATIONAL JOURNAL OF ADVANCED MANUFACTURING TECHNOLOGY, 32(1-2), 116-131</dc:identifier><dc:identifier>0268-3768</dc:identifier><dc:identifier>http://dx.doi.org/10.1007/s00170-005-0310-8</dc:identifier><dc:identifier>http://dspace.library.iitb.ac.in/xmlui/handle/10054/12230</dc:identifier><dc:identifier>http://hdl.handle.net/10054/12230</dc:identifier><dc:language>en</dc:language></oai_dc:dc>