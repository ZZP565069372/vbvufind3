<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><identifier>ir-10054-12239</identifier><datestamp>2011-12-27T05:49:26Z</datestamp><dc:title>AC-EQUATION SOLVING</dc:title><dc:creator>MITRA, S</dc:creator><dc:creator>SIVAKUMAR, G</dc:creator><dc:description>Equational Programming is an elegant way to uniformly integrate important features of logic and functional programming. A number of function symbols encountered in such a programming paradigm have the properties of associativity and commutativity (AC for short). It is therefore important Lo find equation solving strategies which can handle AC operators effectively. In this paper we show that a strict top-down approach extending [Mit90] will not solve the problem in the general case. We then develop a sound and complete strategy for equation solving, which performs better than the conventional approaches using AC-narrowing. Furthermore, we show that by using the AC-rules as constraints while solving the non-AC equations, a number of fruitless (and even infinite) search paths may be eliminated.</dc:description><dc:publisher>SPRINGER VERLAG</dc:publisher><dc:date>2011-08-30T07:36:46Z</dc:date><dc:date>2011-12-26T12:58:50Z</dc:date><dc:date>2011-12-27T05:49:25Z</dc:date><dc:date>2011-08-30T07:36:46Z</dc:date><dc:date>2011-12-26T12:58:50Z</dc:date><dc:date>2011-12-27T05:49:25Z</dc:date><dc:date>1991</dc:date><dc:type>Article</dc:type><dc:identifier>LECTURE NOTES IN COMPUTER SCIENCE, 560(), 40-56</dc:identifier><dc:identifier>0302-9743</dc:identifier><dc:identifier>http://dspace.library.iitb.ac.in/xmlui/handle/10054/12239</dc:identifier><dc:identifier>http://hdl.handle.net/10054/12239</dc:identifier><dc:language>en</dc:language></oai_dc:dc>