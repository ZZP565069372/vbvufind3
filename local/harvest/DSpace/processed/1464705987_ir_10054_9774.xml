<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><identifier>ir-10054-9774</identifier><datestamp>2011-12-27T05:39:31Z</datestamp><dc:title>Improving predictability of transaction execution times in real-time databases</dc:title><dc:creator>RASTOGI, R</dc:creator><dc:creator>SESHADRI, S</dc:creator><dc:creator>BOHANNON, P</dc:creator><dc:creator>LEINBAUGH, D</dc:creator><dc:creator>SILBERSCHATZ, A</dc:creator><dc:creator>SUDARSHAN, S</dc:creator><dc:subject>algorithms</dc:subject><dc:subject>transactions</dc:subject><dc:subject>versioning</dc:subject><dc:subject>concurrency-control</dc:subject><dc:subject>aging</dc:subject><dc:subject>consistency</dc:subject><dc:subject>locking</dc:subject><dc:subject>timestamps</dc:subject><dc:subject>deadlines</dc:subject><dc:description>We present a design for multi-version concurrency control and recovery in a main memory database, and describe logical and physical versioning schemes that allow read-only transactions to execute without obtaining data item locks or system latches. Our schemes enable a system to provide the guarantee that updaters will never interfere with read-only transactions, and read-only transactions will not be delayed due to data contention. Consequently, transaction executions become more predictable-this partially alleviates a major problem in real-time database system (RTDBS) scheduling, namely, significant unpredictability in transaction execution times. As a result, in addition to a transaction's deadline, a more accurate estimate of its execution time can also be taken into account, thus facilitating better scheduling decisions. Our contributions include several space saving techniques for the main-memory implementation, including improved methods for logical aging of data items and the introduction of physical aging for low-level structures. Some of these schemes have been implemented on a widely-used software platform within Lucent, and the full scheme is implemented in the Dali main-memory storage manager.</dc:description><dc:publisher>KLUWER ACADEMIC PUBL</dc:publisher><dc:date>2011-08-17T06:12:29Z</dc:date><dc:date>2011-12-26T12:55:24Z</dc:date><dc:date>2011-12-27T05:39:31Z</dc:date><dc:date>2011-08-17T06:12:29Z</dc:date><dc:date>2011-12-26T12:55:24Z</dc:date><dc:date>2011-12-27T05:39:31Z</dc:date><dc:date>2000</dc:date><dc:type>Article</dc:type><dc:identifier>REAL-TIME SYSTEMS, 19(3), 283-302</dc:identifier><dc:identifier>0922-6443</dc:identifier><dc:identifier>http://dx.doi.org/10.1023/A:1008143228351</dc:identifier><dc:identifier>http://dspace.library.iitb.ac.in/xmlui/handle/10054/9774</dc:identifier><dc:identifier>http://hdl.handle.net/10054/9774</dc:identifier><dc:language>en</dc:language></oai_dc:dc>