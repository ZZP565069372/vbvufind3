<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><identifier>ir-10054-1587</identifier><datestamp>2011-12-15T09:57:45Z</datestamp><dc:title>On-line reorganization in object databases</dc:title><dc:creator>LAKHAMRAJU, MOHANA K</dc:creator><dc:creator>RASTOGI, RAJEEV</dc:creator><dc:creator>SESHADRI, S</dc:creator><dc:creator>SUDARSHAN, S</dc:creator><dc:subject>object-oriented databases</dc:subject><dc:subject>transaction processing</dc:subject><dc:subject>software performance evaluation</dc:subject><dc:subject>storage management</dc:subject><dc:subject>software fault tolerance</dc:subject><dc:description>Reorganization of objects in an object databases is an important component of several operations like compaction, clustering, and schema evolution. The high availability requirements (24 Ã— 7 operation) of certain application domains requires reorganization to be performed on-line with minimal interference to concurrently executing transactions.

In this paper, we address the problem of on-line reorganization in object databases, where a set of objects have to be migrated from one location to another. Specifically, we consider the case where objects in the database may contain physical references to other objects. Relocating an object in this case involves finding the set of objects (parents) that refer to it, and modifying the references in each parent. We propose an algorithm called the Incremental Reorganization Algorithm (IRA) that achieves the above task with minimal interference to concurrently executing transactions. The IRA algorithm holds locks on at most two distinct objects at any point of time. We have implemented IRA on Brahma, a storage manager developed at IIT Bombay, and conducted an extensive performance study. Our experiments reveal that IRA makes on-line reorganization feasible, with very little impact on the response times of concurrently executing transactions and on overall system throughput. We also describe how the IRA algorithm can handle system failures.</dc:description><dc:publisher>Association for Computing Machinery</dc:publisher><dc:date>2009-07-03T04:45:18Z</dc:date><dc:date>2011-11-28T08:41:46Z</dc:date><dc:date>2011-12-15T09:57:45Z</dc:date><dc:date>2009-07-03T04:45:18Z</dc:date><dc:date>2011-11-28T08:41:46Z</dc:date><dc:date>2011-12-15T09:57:45Z</dc:date><dc:date>2000</dc:date><dc:identifier>Proceedings of the ACM SIGMOD International Conference on Management of Data, Dallas, Texas, USA, 16-18 May 2000, 58-69</dc:identifier><dc:identifier>1-58113-217-4</dc:identifier><dc:identifier>10.1145/342009.335381</dc:identifier><dc:identifier>http://hdl.handle.net/10054/1587</dc:identifier><dc:identifier>http://dspace.library.iitb.ac.in/xmlui/handle/10054/1587</dc:identifier><dc:language>en</dc:language></oai_dc:dc>