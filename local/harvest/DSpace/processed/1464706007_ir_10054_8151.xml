<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><identifier>ir-10054-8151</identifier><datestamp>2011-12-27T05:40:09Z</datestamp><dc:title>Resilient and coherence preserving dissemination of dynamic data using cooperating peers</dc:title><dc:creator>SHAH, S</dc:creator><dc:creator>RAMAMRITHAM, K</dc:creator><dc:creator>SHENOY, P</dc:creator><dc:subject>resiliency</dc:subject><dc:subject>dynamic data dissemination</dc:subject><dc:subject>data coherence</dc:subject><dc:subject>cooperation</dc:subject><dc:description>The focus of our work is to design and build a dynamic data distribution system that is coherence-preserving, i.e., the delivered data must preserve associated coherence requirements (the user-specified bound on tolerable imprecision) and resilient to failures. To this end, we consider a system in which a set of repositories cooperate with each other and the sources, forming a peer-to-peer network. In this system, necessary changes are pushed to the users so that they are automatically informed about changes of interest. We present techniques 1) to determine when to push an update from one repository to another for coherence maintenance, 2) to construct an efficient dissemination tree for propagating changes from sources to cooperating repositories, and 3) to make the system resilient to failures. An experimental evaluation using real world traces of dynamically changing data demonstrates that 1) careful dissemination of updates through a network of cooperating repositories can substantially lower the cost of coherence maintenance, 2) unless designed carefully, even push-based systems experience considerable loss in fidelity due to message delays and processing costs, 3) the computational and communication cost of achieving resiliency can be made to be low, and 4) surprisingly, adding resiliency can actually improve fidelity even in the absence of failures.</dc:description><dc:publisher>IEEE COMPUTER SOC</dc:publisher><dc:date>2011-07-31T14:53:26Z</dc:date><dc:date>2011-12-26T12:53:03Z</dc:date><dc:date>2011-12-27T05:40:08Z</dc:date><dc:date>2011-07-31T14:53:26Z</dc:date><dc:date>2011-12-26T12:53:03Z</dc:date><dc:date>2011-12-27T05:40:08Z</dc:date><dc:date>2004</dc:date><dc:type>Article</dc:type><dc:identifier>IEEE TRANSACTIONS ON KNOWLEDGE AND DATA ENGINEERING, 16(7), 799-812</dc:identifier><dc:identifier>1041-4347</dc:identifier><dc:identifier>http://dx.doi.org/10.1109/TKDE.2004.1318563</dc:identifier><dc:identifier>http://dspace.library.iitb.ac.in/xmlui/handle/10054/8151</dc:identifier><dc:identifier>http://hdl.handle.net/10054/8151</dc:identifier><dc:language>en</dc:language></oai_dc:dc>