<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><identifier>ir-10054-5378</identifier><datestamp>2011-12-27T05:37:56Z</datestamp><dc:title>STRENGTH REDUCTION OF LARGE EXPRESSIONS</dc:title><dc:creator>DHANESHWAR, VM</dc:creator><dc:creator>DHAMDHERE, DM</dc:creator><dc:subject>global program optimization</dc:subject><dc:subject>algorithm</dc:subject><dc:subject>transformation</dc:subject><dc:subject>code optimization</dc:subject><dc:subject>strength reduction</dc:subject><dc:subject>dead code elimination</dc:subject><dc:subject>large expressions</dc:subject><dc:subject>data flow analysis</dc:subject><dc:subject>decomposition of data flows</dc:subject><dc:subject>fixed point</dc:subject><dc:description>Strength reduction of a large expression cannot be performed as a second-order effect of optimizing its subexpression(s). The ideas of composite hoisting and strength reduction are used to develop an algorithm for the strength reduction of a large expression (SRLE) as a single entity using the framework for partial redundancy elimination. SRLE subsumes the conventional optimizations of code hoisting, common subexpression elimination, loop invariant movement and strength reduction, thereby performing comprehensive optimization of a program. It performs partial-redundancy elimination as effectively as other recent algorithms, and also eliminates several suboptimalities of previously published work in partial-redundancy-based strength reduction. The SRLE algorithm involves use of nonsingular bidirectional data flows, giving rise to interesting issues concerning the desired fixed point of the data flows. A solution method based on the principle of decomposition of bidirectional data flows into a sequence of unidirectional data flows is shown to achieve the desired fixed point of the bidirectional data flows more elegantly than earlier methods. Experimental results as well as proof of correctness of the algorithm are included.</dc:description><dc:publisher>CHAPMAN HALL LTD</dc:publisher><dc:date>2011-07-20T06:18:51Z</dc:date><dc:date>2011-12-26T12:51:20Z</dc:date><dc:date>2011-12-27T05:37:56Z</dc:date><dc:date>2011-07-20T06:18:51Z</dc:date><dc:date>2011-12-26T12:51:20Z</dc:date><dc:date>2011-12-27T05:37:56Z</dc:date><dc:date>1995</dc:date><dc:type>Article</dc:type><dc:identifier>JOURNAL OF PROGRAMMING LANGUAGES, 3(2), 95-120</dc:identifier><dc:identifier>0963-9306</dc:identifier><dc:identifier>http://dspace.library.iitb.ac.in/xmlui/handle/10054/5378</dc:identifier><dc:identifier>http://hdl.handle.net/10054/5378</dc:identifier><dc:language>en</dc:language></oai_dc:dc>