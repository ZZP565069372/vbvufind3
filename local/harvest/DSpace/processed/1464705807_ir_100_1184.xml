<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><identifier>ir-100-1184</identifier><datestamp>2011-12-15T09:09:57Z</datestamp><dc:title>Apportioning : a technique for efficient reachability analysis of concurrent object-oriented programs</dc:title><dc:creator>IYER, S</dc:creator><dc:creator>RAMESH, S</dc:creator><dc:subject>parallel programs</dc:subject><dc:subject>algorithm</dc:subject><dc:subject>debugger</dc:subject><dc:subject>system</dc:subject><dc:subject>concurrent programs</dc:subject><dc:subject>object-oriented programming</dc:subject><dc:subject>static analysis</dc:subject><dc:subject>reachability analysis</dc:subject><dc:description>The object-oriented paradigm in software engineering provides support for the construction of modular and reusable program components and is attractive for the design of large and complex distributed systems. Reachability analysis is an important and well-known tool for static analysis of critical properties in concurrent programs, such as deadlock freedom. It involves the systematic enumeration of all possible global states of program execution and provides the same level of assurance for properties of the synchronization structure in concurrent programs, such as formal verification. However, direct application of traditional reachability analysis to concurrent object-oriented programs has many problems, such as incomplete analysis for reusable classes (not safe) and increased computational complexity (not efficient). We have proposed a novel technique called apportioning, for safe and efficient reachability analysis of concurrent object-oriented programs, that is based upon a simple but powerful idea of classification of program analysis points as local (having influence within a class) and global (having possible influence outside a class). Given a program and a classification of its analysis points, reachability graphs are generated for 1) an abstract version of each class in the program having only local analysis points and 2) an abstract version of the whole program having only global analysis points. The error to be checked is decomposed into a number of subproperties, which are checked in the appropriate, reachability graphs. Different choices for the classification of analysis points, provide the flexibility to have many algorithms that are safe and efficient for different subclasses of programs. We have developed a number of apportioning-based algorithms, having different degrees of safety and efficiency. In this paper, we present the details of one of these algorithms, formally show its safety for an appropriate class of programs, and present experimental results to demonstrate its efficiency for various examples.</dc:description><dc:publisher>IEEE COMPUTER SOC</dc:publisher><dc:date>2011-10-20T13:23:37Z</dc:date><dc:date>2011-12-15T09:09:57Z</dc:date><dc:date>2011-10-20T13:23:37Z</dc:date><dc:date>2011-12-15T09:09:57Z</dc:date><dc:date>2001</dc:date><dc:type>Article; Proceedings Paper</dc:type><dc:identifier>IEEE TRANSACTIONS ON SOFTWARE ENGINEERING,27(11)1037-1056</dc:identifier><dc:identifier>0098-5589</dc:identifier><dc:identifier>http://dx.doi.org/10.1109/32.965343</dc:identifier><dc:identifier>http://dspace.library.iitb.ac.in/xmlui/handle/10054/14667</dc:identifier><dc:identifier>http://hdl.handle.net/100/1184</dc:identifier><dc:source>7th IEEE International Software Metrics Symposium,LONDON, ENGLAND,APR 04-06, 2001</dc:source><dc:language>English</dc:language></oai_dc:dc>