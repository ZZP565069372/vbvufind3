<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"><identifier>ir-10054-1554</identifier><datestamp>2011-12-27T05:49:18Z</datestamp><dc:title>Space optimization in deductive databases</dc:title><dc:creator>SRIVASTAVA, DIVESH</dc:creator><dc:creator>SUDARSHAN, S</dc:creator><dc:creator>RAMAKRISHNAN, RAGHU</dc:creator><dc:creator>NAUGHTON, JEFFREY F</dc:creator><dc:subject>database systems</dc:subject><dc:subject>logic programming</dc:subject><dc:subject>query languages</dc:subject><dc:subject>recursive functions</dc:subject><dc:subject>synchronization</dc:subject><dc:description>In the bottom-up evaluation of logic programs and recursively defined views on databases, all generated facts are usually assumed to be stored until the end of the evaluation. Discarding facts during the evaluation, however, can considerably improve the efficiency of the evaluation: the space needed to evaluate the program, the I/O costs, the costs of maintaining and accessing indices, and the cost of eliminating duplicates may all be reduced. Given an evaluation method that is sound, complete, and does not repeat derivation steps, we consider how facts can be discarded during the evaluation without compromising these properties. We show that every such space optimization method has certain components, the first to ensure soundness and completeness, the second to avoid redundancy (i.e., repetition of derivations), and the third to reduce “fact lifetimes” (i.e., the time period for which each fact must be retained during evaluation). We present new techniques based on providing bounds on the number of derivations and uses of facts, and using monotonicity constraints for each of the first two components, and provide novel synchronization techniques for the third component of a space optimization method. We describe how techniques for each of the three components can be combined in practice to obtain a space optimization method for a program. Our results are also of importance in applications such as sequence querying, and in active databases where triggers are defined over multiple “events.”</dc:description><dc:publisher>Association for Computing Machinery</dc:publisher><dc:date>2009-06-22T04:32:32Z</dc:date><dc:date>2011-12-08T08:13:13Z</dc:date><dc:date>2011-12-26T13:02:40Z</dc:date><dc:date>2011-12-27T05:49:18Z</dc:date><dc:date>2009-06-22T04:32:32Z</dc:date><dc:date>2011-12-08T08:13:13Z</dc:date><dc:date>2011-12-26T13:02:40Z</dc:date><dc:date>2011-12-27T05:49:18Z</dc:date><dc:date>1995</dc:date><dc:type>Article</dc:type><dc:identifier>ACM Transactions on Database Systems (TODS) 20(4), 472-516</dc:identifier><dc:identifier>0362-59154</dc:identifier><dc:identifier>10.1145/219035.219056</dc:identifier><dc:identifier>http://hdl.handle.net/10054/1554</dc:identifier><dc:identifier>http://dspace.library.iitb.ac.in/xmlui/handle/10054/1554</dc:identifier><dc:language>en</dc:language></oai_dc:dc>